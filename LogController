
//  LogController.swift

import Foundation
import ShipBookSDK
import UIKit

class LogController {
    static let shared = LogController()
    var shipBook = ShipBook.getLogger(UIViewController.self)
    var isLogDisable = false
    
    // MARK: - Helper Functions
    func disableLog(){
        isLogDisable = true
    }
    
    func enableLog(){
        isLogDisable = false
    }
    
    private func getNewLacationForShipBook(at: String) -> String {
        let seperateAt = at.components(separatedBy: "--- IN")
        let firstAt = seperateAt.first
        let newAt = firstAt?.replacingOccurrences(of: "---", with: "|")
        return newAt ?? ""
    }
    
    // MARK: - Log Functions
    func logLine<T>(message: String, type: T , at: String) {
        if isLogDisable == false {
            print("\n\(Date())------------------ \(message) : \(type) ------------------ AT LINE : \(at) ------------------\n")
        }
    }
    
    func logGetFinalURL(url: URL, urlOf: String, at: String) {
        if isLogDisable == false {
            print("\n\(Date())------------------ URL GET For \(urlOf) : \(url) ------------------  AT LINE : \(at) ------------------\n")
        }
    }
    
    func logGetResponseCode(response: HTTPURLResponse, taskOf: String, at: String) {
        if isLogDisable == false {
            print("\n\(Date())------------------ GET Response Code  For \(taskOf) : \(response.statusCode) ------------------  AT LINE : \(at) ------------------\n")
        }
    }
    
    func logPostFinalURL(url: URL, urlOf: String, at: String) {
        if isLogDisable == false {
            print("\n\(Date())------------------ URL POST For \(urlOf) : \(url) ------------------  AT LINE : \(at) ------------------\n")
        }
    }
    
    func logURL(url: URL?, urlOf: String, at: String) {
        if isLogDisable == false {
            print("\n\(Date())------------------ URL For \(urlOf) : \(String(describing: url)) ------------------  AT LINE : \(at) ------------------\n")
        }
    }
    
    func logPostResponseCode(response: HTTPURLResponse, taskOf: String, at: String) {
        if isLogDisable == false {
            print("\n\(Date())------------------ POST Response Code  For \(taskOf) : \(response.statusCode) ------------------  AT LINE : \(at) ------------------\n")
        }
    }
    
    func logJsonEncode(jsonBody: Data, taskOf: String, at: String) {
        if isLogDisable == false {
            print("\n\(Date())----------------------------------------------------  ENCODE JSON of \(taskOf) : \(jsonBody) ----------------------------------------------------")
            print(String(data: jsonBody, encoding: .utf8)!)
            print("--------------------------------------  Encode of \(taskOf) AT LINE : \(at) --------------------------------------\n")
        }
    }
    
    func logJsonDecode(jsonBody: Data, taskOf: String, at: String) {
        if isLogDisable == false {
            print("\n\(Date())----------------------------------------------------  DECODE JSON of \(taskOf) : \(jsonBody) ----------------------------------------------------")
            print(String(data: jsonBody, encoding: .utf8)!)
            print("--------------------------------------  Decode of \(taskOf) AT LINE : \(at) --------------------------------------\n")
        }
    }
    
    func logNetworkError(error: NetworkError, taskOf: String, at: String) {
        if isLogDisable == false {
            print("\n\(Date())------------------ NETWORK ERROR : \(error.errorDescription) ==> ERROR : \(error.localizedDescription) \(taskOf) ------------------  AT LINE : \(at) ------------------\n")
        }
        let newLocationForShipBook = getNewLacationForShipBook(at: at)
        let shipBookError = "\(AppDataController.shared.environment) | NETWORK ERROR : \(error.errorDescription) - \(error.localizedDescription) of \(taskOf) | AT LINE : \(newLocationForShipBook)"
        shipBook.e(shipBookError)
    }
    
    func logError(error: Error, errorMessage: String, at: String) {
        if isLogDisable == false {
            print("\n\(Date())------------------ ERROR \(errorMessage) : \(error.localizedDescription) ------------------  AT LINE : \(at) ------------------\n")
        }
        let newLocationForShipBook = getNewLacationForShipBook(at: at)
        let shipBookError = "\(AppDataController.shared.environment) | ERROR : \(errorMessage) - \(error.localizedDescription) | AT LINE : \(newLocationForShipBook)"
        shipBook.e(shipBookError)
    }
    
    // The warning for switch case and guard and if let.
    func logWarning<T>(message: String, type: T , at: String) {
        if isLogDisable == false {
            print("\n\(Date())------------------ WARNING ==> \(message) - \(type) ------------------ AT LINE : \(at) ------------------\n")
        }
        let newLocationForShipBook = getNewLacationForShipBook(at: at)
        let shipBookError = "\(AppDataController.shared.environment) | WARNING : \(message) - \(type) | AT LINE : \(newLocationForShipBook)"
        shipBook.w(shipBookError)
    }
    
    func logSuccess<T>(message: String, type: T , at: String) {
        if isLogDisable == false {
            print("\n\(Date())------------------ SUCCESSFULLY ==> \(message) : \(type) ------------------ AT LINE : \(at) ------------------\n")
        }
        let newLocationForShipBook = getNewLacationForShipBook(at: at)
        let shipBookInfo = "\(AppDataController.shared.environment) | SUCCESSFULLY : \(message) - \(type) | AT LINE : \(newLocationForShipBook)"
        shipBook.v(shipBookInfo)
    }
    
    func logVerbose<T>(message: String, type: T , at: String) {
        if isLogDisable == false {
            print("\n\(Date())------------------  \(message) : \(type) ------------------ AT LINE : \(at) ------------------\n")
        }
        let newLocationForShipBook = getNewLacationForShipBook(at: at)
        let shipBookInfo = "\(AppDataController.shared.environment) | \(message) - \(type) | AT LINE : \(newLocationForShipBook)"
        shipBook.v(shipBookInfo)
    }
    
    func logInfo<T>(message: String, type: T , at: String) {
        if isLogDisable == false {
            print("\n\(Date())------------------ INFO ==> \(message) : \(type)------------------ AT LINE : \(at) ------------------\n")
        }
        let newLocationForShipBook = getNewLacationForShipBook(at: at)
        let shipBookInfo = "\(AppDataController.shared.environment) | INFO : \(message) - \(type) | AT LINE : \(newLocationForShipBook)"
        shipBook.i(shipBookInfo)
    }
}

// MARK: - NOTE
/*
 https://docs.shipbook.io/ios
 import ShipBookSDK
 fileprivate let log = ShipBook.getLogger(MainViewController.self)
 log.e("the log message") // Error log
 log.w("the log message") // Warning log
 log.i("the log message") // Info log
 log.d("the log message") // Debug log
 log.v("the log message") // Verbose log
 ShipBook.screen(name: "SCREEN_NAME")
 */
